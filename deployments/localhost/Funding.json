{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "campaigns",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "finishedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "finishDate",
          "type": "uint256"
        }
      ],
      "name": "createCampaign",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "campaignId",
          "type": "uint256"
        }
      ],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "funder",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "filled",
              "type": "bool"
            }
          ],
          "internalType": "struct Funding.FundTx[]",
          "name": "funds",
          "type": "tuple[]"
        }
      ],
      "name": "fundsSum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "campaignId",
          "type": "uint256"
        }
      ],
      "name": "getCampaign",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "target",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "funder",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "filled",
                  "type": "bool"
                }
              ],
              "internalType": "struct Funding.FundTx[]",
              "name": "fundTxs",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "startedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "finishedAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct Funding.Campaign",
          "name": "campaign",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "campaignId",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf634daede77e595b5ffaa23be78a7dcdcadbb386397a5d921679d2f47ff0d804",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "1956956",
    "logsBloom": "0x
    "blockHash": "0x60b57cb6b140ac940276df3eaabba487662348fb139a9c01309a9cc615b0f347",
    "transactionHash": "0xf634daede77e595b5ffaa23be78a7dcdcadbb386397a5d921679d2f47ff0d804",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0xf634daede77e595b5ffaa23be78a7dcdcadbb386397a5d921679d2f47ff0d804",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x60b57cb6b140ac940276df3eaabba487662348fb139a9c01309a9cc615b0f347"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "1956956",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8f62e150a253ba1951d18fd1f59464b2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"campaigns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finishedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finishDate\",\"type\":\"uint256\"}],\"name\":\"createCampaign\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"}],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"filled\",\"type\":\"bool\"}],\"internalType\":\"struct Funding.FundTx[]\",\"name\":\"funds\",\"type\":\"tuple[]\"}],\"name\":\"fundsSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"}],\"name\":\"getCampaign\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"filled\",\"type\":\"bool\"}],\"internalType\":\"struct Funding.FundTx[]\",\"name\":\"fundTxs\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finishedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct Funding.Campaign\",\"name\":\"campaign\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Funding.sol\":\"Funding\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"contracts/Funding.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Funding is Ownable {\\n    using SafeMath for uint256;\\n\\n    struct Campaign {\\n        uint256 id;\\n        address owner;\\n        uint256 target;\\n        FundTx[] fundTxs;\\n        uint startedAt;\\n        uint finishedAt;\\n    }\\n\\n    struct FundTx {\\n        address funder;\\n        uint256 amount;\\n        bool filled;\\n    }\\n\\n    Campaign[] public campaigns;\\n\\n    modifier campaignExists(uint256 campaignId) {\\n        require(campaigns.length > campaignId, \\\"Campaign doesn't exist\\\");\\n        _;\\n    }\\n\\n    function getCampaign(uint256 campaignId) public view returns (Campaign memory campaign) {\\n        Campaign memory c = campaigns[campaignId];\\n        return c;\\n    }\\n\\n    function createCampaign(address owner, uint256 target, uint256 startDate, uint256 finishDate) external onlyOwner returns (uint256) {\\n        require(startDate < finishDate, \\\"Invalid dates, startDate later than finishDate\\\");\\n        require(startDate > block.timestamp, \\\"Start date is in the past\\\");\\n        require(target > 0, \\\"Invalid target\\\");\\n        require(owner != address(0), \\\"Invalid owner\\\");\\n        campaigns.push();\\n        Campaign storage campaign = campaigns[campaigns.length - 1];\\n        campaign.id = campaigns.length-1;\\n        campaign.owner = owner;\\n        campaign.target = target;\\n        campaign.startedAt = startDate;\\n        campaign.finishedAt = finishDate;\\n        return campaigns.length-1;\\n    }\\n\\n    function fund(uint256 campaignId) external payable campaignExists(campaignId) {\\n        Campaign storage campaign = campaigns[campaignId];\\n        require(block.timestamp > campaign.startedAt, \\\"Campaign is not started yet\\\");\\n        require(block.timestamp < campaign.finishedAt, \\\"Campaign is already finished\\\");\\n        require(msg.sender != campaign.owner, \\\"Owner cannot fund its own campaign\\\");\\n        campaigns[campaignId].fundTxs.push(FundTx(msg.sender, msg.value, false));\\n    }\\n\\n    function withdraw(uint256 campaignId) external campaignExists(campaignId) {\\n        Campaign storage campaign = campaigns[campaignId];\\n        require(block.timestamp > campaign.finishedAt, \\\"Campaign is not finished yet\\\");\\n        uint256 toWithdraw = 0;\\n        if (msg.sender == campaign.owner) {\\n            require(fundsSum(campaign.fundTxs) > campaign.target,\\\"Campaign is failed, cannot collect funds by owner\\\");\\n            for(uint256 i = 0; i < campaign.fundTxs.length; i = i.add(1)) {\\n                if (!campaign.fundTxs[i].filled){\\n                    campaign.fundTxs[i].filled = true;\\n                    toWithdraw = toWithdraw.add(campaign.fundTxs[i].amount);\\n                }\\n            }\\n        } else {\\n            require(fundsSum(campaign.fundTxs) < campaign.target,\\\"Campaign is succeeded, cannot collect funds by funders\\\");\\n            for(uint256 i = 0; i < campaign.fundTxs.length; i = i.add(1)) {\\n                if (campaign.fundTxs[i].funder == msg.sender && !campaign.fundTxs[i].filled){\\n                    campaign.fundTxs[i].filled = true;\\n                    toWithdraw = toWithdraw.add(campaign.fundTxs[i].amount);\\n                }\\n            }\\n        }\\n        require(toWithdraw > 0, \\\"Nothing to withdraw\\\");\\n        payable(msg.sender).transfer(toWithdraw);\\n    }\\n\\n    function fundsSum(FundTx[] memory funds ) public pure returns(uint256) {\\n        uint256 sum;\\n        for (uint256 i = 0; i < funds.length; i++) {\\n            sum += funds[i].amount;\\n        }\\n        return sum;\\n    }\\n}\",\"keccak256\":\"0x092323857ac8292b888d68cdc54467d4e0d83cc369a1c6b228b3c05b0db3cdc2\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060006100216100c460201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3506100cc565b600033905090565b61223b806100db6000396000f3fe6080604052600436106100865760003560e01c80638da5cb5b116100595780638da5cb5b14610149578063ca1d209d14610174578063ca59f2e414610190578063d8f5ea57146101cd578063f2fde38b1461020a57610086565b8063141961bc1461008b5780632e1a7d4d146100cc5780635598f8cc146100f5578063715018a614610132575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190611742565b610233565b6040516100c3959493929190611f4d565b60405180910390f35b3480156100d857600080fd5b506100f360048036038101906100ee9190611742565b610299565b005b34801561010157600080fd5b5061011c60048036038101906101179190611742565b6109f9565b6040516101299190611f10565b60405180910390f35b34801561013e57600080fd5b50610147610bb9565b005b34801561015557600080fd5b5061015e610cf3565b60405161016b9190611d35565b60405180910390f35b61018e60048036038101906101899190611742565b610d1c565b005b34801561019c57600080fd5b506101b760048036038101906101b2919061169e565b610fef565b6040516101c49190611f32565b60405180910390f35b3480156101d957600080fd5b506101f460048036038101906101ef9190611701565b6112af565b6040516102019190611f32565b60405180910390f35b34801561021657600080fd5b50610231600480360381019061022c9190611675565b61132d565b005b6001818154811061024357600080fd5b90600052602060002090600602016000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060040154908060050154905085565b8080600180549050116102e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d890611e10565b60405180910390fd5b60006001838154811061031d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060060201905080600501544211610373576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036a90611e30565b60405180910390fd5b60008160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561064a5781600201546104af83600301805480602002602001604051908101604052809291908181526020016000905b828210156104a657838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff161515151581525050815260200190600101906103f9565b505050506112af565b116104ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e690611e50565b60405180910390fd5b60005b82600301805490508110156106445782600301818154811061053d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160020160009054906101000a900460ff1661062957600183600301828154811061059e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160020160006101000a81548160ff021916908315150217905550610626836003018281548110610605577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160010154836114d690919063ffffffff16565b91505b61063d6001826114d690919063ffffffff16565b90506104f2565b50610969565b816002015461072c83600301805480602002602001604051908101604052809291908181526020016000905b8282101561072357838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff16151515158152505081526020019060010190610676565b505050506112af565b1061076c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076390611eb0565b60405180910390fd5b60005b8260030180549050811015610967573373ffffffffffffffffffffffffffffffffffffffff168360030182815481106107d1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614801561087e575082600301818154811061085d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160020160009054906101000a900460ff16155b1561094c5760018360030182815481106108c1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160020160006101000a81548160ff021916908315150217905550610949836003018281548110610928577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160010154836114d690919063ffffffff16565b91505b6109606001826114d690919063ffffffff16565b905061076f565b505b600081116109ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a390611dd0565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156109f2573d6000803e3d6000fd5b5050505050565b610a016114f4565b600060018381548110610a3d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600602016040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201805480602002602001604051908101604052809291908181526020016000905b82821015610b9257838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff16151515158152505081526020019060010190610ae5565b50505050815260200160048201548152602001600582015481525050905080915050919050565b610bc16114ec565b73ffffffffffffffffffffffffffffffffffffffff16610bdf610cf3565b73ffffffffffffffffffffffffffffffffffffffff1614610c35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2c90611e70565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b808060018054905011610d64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5b90611e10565b60405180910390fd5b600060018381548110610da0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060060201905080600401544211610df6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ded90611e90565b60405180910390fd5b80600501544210610e3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3390611d50565b60405180910390fd5b8060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610ecf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec690611ef0565b60405180910390fd5b60018381548110610f09577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906006020160030160405180606001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200134815260200160001515815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548160ff0219169083151502179055505050505050565b6000610ff96114ec565b73ffffffffffffffffffffffffffffffffffffffff16611017610cf3565b73ffffffffffffffffffffffffffffffffffffffff161461106d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106490611e70565b60405180910390fd5b8183106110af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a690611db0565b60405180910390fd5b4283116110f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e890611ed0565b60405180910390fd5b60008411611134576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112b90611d90565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614156111a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119b90611d70565b60405180910390fd5b6001808160018154018082558091505003906000526020600020905050600060018080805490506111d5919061209d565b8154811061120c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906006020190506001808054905061122d919061209d565b8160000181905550858160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550848160020181905550838160040181905550828160050181905550600180805490506112a4919061209d565b915050949350505050565b60008060005b8351811015611323578381815181106112f7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151602001518261130e9190612047565b9150808061131b90612119565b9150506112b5565b5080915050919050565b6113356114ec565b73ffffffffffffffffffffffffffffffffffffffff16611353610cf3565b73ffffffffffffffffffffffffffffffffffffffff16146113a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a090611e70565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611419576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141090611df0565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600081836114e49190612047565b905092915050565b600033905090565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016060815260200160008152602001600081525090565b600061155361154e84611fd1565b611fa0565b9050808382526020820190508285606086028201111561157257600080fd5b60005b858110156115a257816115888882611600565b845260208401935060608301925050600181019050611575565b5050509392505050565b6000813590506115bb816121c0565b92915050565b600082601f8301126115d257600080fd5b81356115e2848260208601611540565b91505092915050565b6000813590506115fa816121d7565b92915050565b60006060828403121561161257600080fd5b61161c6060611fa0565b9050600061162c848285016115ac565b600083015250602061164084828501611660565b6020830152506040611654848285016115eb565b60408301525092915050565b60008135905061166f816121ee565b92915050565b60006020828403121561168757600080fd5b6000611695848285016115ac565b91505092915050565b600080600080608085870312156116b457600080fd5b60006116c2878288016115ac565b94505060206116d387828801611660565b93505060406116e487828801611660565b92505060606116f587828801611660565b91505092959194509250565b60006020828403121561171357600080fd5b600082013567ffffffffffffffff81111561172d57600080fd5b611739848285016115c1565b91505092915050565b60006020828403121561175457600080fd5b600061176284828501611660565b91505092915050565b60006117778383611cd5565b60608301905092915050565b61178c816120d1565b82525050565b61179b816120d1565b82525050565b60006117ac8261200d565b6117b68185612025565b93506117c183611ffd565b8060005b838110156117f25781516117d9888261176b565b97506117e483612018565b9250506001810190506117c5565b5085935050505092915050565b611808816120e3565b82525050565b600061181b601c83612036565b91507f43616d706169676e20697320616c72656164792066696e6973686564000000006000830152602082019050919050565b600061185b600d83612036565b91507f496e76616c6964206f776e6572000000000000000000000000000000000000006000830152602082019050919050565b600061189b600e83612036565b91507f496e76616c6964207461726765740000000000000000000000000000000000006000830152602082019050919050565b60006118db602e83612036565b91507f496e76616c69642064617465732c20737461727444617465206c61746572207460008301527f68616e2066696e697368446174650000000000000000000000000000000000006020830152604082019050919050565b6000611941601383612036565b91507f4e6f7468696e6720746f207769746864726177000000000000000000000000006000830152602082019050919050565b6000611981602683612036565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006119e7601683612036565b91507f43616d706169676e20646f65736e2774206578697374000000000000000000006000830152602082019050919050565b6000611a27601c83612036565b91507f43616d706169676e206973206e6f742066696e697368656420796574000000006000830152602082019050919050565b6000611a67603183612036565b91507f43616d706169676e206973206661696c65642c2063616e6e6f7420636f6c6c6560008301527f63742066756e6473206279206f776e65720000000000000000000000000000006020830152604082019050919050565b6000611acd602083612036565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000611b0d601b83612036565b91507f43616d706169676e206973206e6f7420737461727465642079657400000000006000830152602082019050919050565b6000611b4d603683612036565b91507f43616d706169676e206973207375636365656465642c2063616e6e6f7420636f60008301527f6c6c6563742066756e64732062792066756e64657273000000000000000000006020830152604082019050919050565b6000611bb3601983612036565b91507f5374617274206461746520697320696e207468652070617374000000000000006000830152602082019050919050565b6000611bf3602283612036565b91507f4f776e65722063616e6e6f742066756e6420697473206f776e2063616d70616960008301527f676e0000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600060c083016000830151611c646000860182611d17565b506020830151611c776020860182611783565b506040830151611c8a6040860182611d17565b5060608301518482036060860152611ca282826117a1565b9150506080830151611cb76080860182611d17565b5060a0830151611cca60a0860182611d17565b508091505092915050565b606082016000820151611ceb6000850182611783565b506020820151611cfe6020850182611d17565b506040820151611d1160408501826117ff565b50505050565b611d208161210f565b82525050565b611d2f8161210f565b82525050565b6000602082019050611d4a6000830184611792565b92915050565b60006020820190508181036000830152611d698161180e565b9050919050565b60006020820190508181036000830152611d898161184e565b9050919050565b60006020820190508181036000830152611da98161188e565b9050919050565b60006020820190508181036000830152611dc9816118ce565b9050919050565b60006020820190508181036000830152611de981611934565b9050919050565b60006020820190508181036000830152611e0981611974565b9050919050565b60006020820190508181036000830152611e29816119da565b9050919050565b60006020820190508181036000830152611e4981611a1a565b9050919050565b60006020820190508181036000830152611e6981611a5a565b9050919050565b60006020820190508181036000830152611e8981611ac0565b9050919050565b60006020820190508181036000830152611ea981611b00565b9050919050565b60006020820190508181036000830152611ec981611b40565b9050919050565b60006020820190508181036000830152611ee981611ba6565b9050919050565b60006020820190508181036000830152611f0981611be6565b9050919050565b60006020820190508181036000830152611f2a8184611c4c565b905092915050565b6000602082019050611f476000830184611d26565b92915050565b600060a082019050611f626000830188611d26565b611f6f6020830187611792565b611f7c6040830186611d26565b611f896060830185611d26565b611f966080830184611d26565b9695505050505050565b6000604051905081810181811067ffffffffffffffff82111715611fc757611fc6612191565b5b8060405250919050565b600067ffffffffffffffff821115611fec57611feb612191565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006120528261210f565b915061205d8361210f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561209257612091612162565b5b828201905092915050565b60006120a88261210f565b91506120b38361210f565b9250828210156120c6576120c5612162565b5b828203905092915050565b60006120dc826120ef565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006121248261210f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561215757612156612162565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6121c9816120d1565b81146121d457600080fd5b50565b6121e0816120e3565b81146121eb57600080fd5b50565b6121f78161210f565b811461220257600080fd5b5056fea26469706673582212204463af136d3502f11902dec154ea70fd96af141a7d7d381d4906b7cbf961cf7b64736f6c63430008000033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c80638da5cb5b116100595780638da5cb5b14610149578063ca1d209d14610174578063ca59f2e414610190578063d8f5ea57146101cd578063f2fde38b1461020a57610086565b8063141961bc1461008b5780632e1a7d4d146100cc5780635598f8cc146100f5578063715018a614610132575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190611742565b610233565b6040516100c3959493929190611f4d565b60405180910390f35b3480156100d857600080fd5b506100f360048036038101906100ee9190611742565b610299565b005b34801561010157600080fd5b5061011c60048036038101906101179190611742565b6109f9565b6040516101299190611f10565b60405180910390f35b34801561013e57600080fd5b50610147610bb9565b005b34801561015557600080fd5b5061015e610cf3565b60405161016b9190611d35565b60405180910390f35b61018e60048036038101906101899190611742565b610d1c565b005b34801561019c57600080fd5b506101b760048036038101906101b2919061169e565b610fef565b6040516101c49190611f32565b60405180910390f35b3480156101d957600080fd5b506101f460048036038101906101ef9190611701565b6112af565b6040516102019190611f32565b60405180910390f35b34801561021657600080fd5b50610231600480360381019061022c9190611675565b61132d565b005b6001818154811061024357600080fd5b90600052602060002090600602016000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060040154908060050154905085565b8080600180549050116102e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d890611e10565b60405180910390fd5b60006001838154811061031d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060060201905080600501544211610373576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036a90611e30565b60405180910390fd5b60008160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561064a5781600201546104af83600301805480602002602001604051908101604052809291908181526020016000905b828210156104a657838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff161515151581525050815260200190600101906103f9565b505050506112af565b116104ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e690611e50565b60405180910390fd5b60005b82600301805490508110156106445782600301818154811061053d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160020160009054906101000a900460ff1661062957600183600301828154811061059e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160020160006101000a81548160ff021916908315150217905550610626836003018281548110610605577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160010154836114d690919063ffffffff16565b91505b61063d6001826114d690919063ffffffff16565b90506104f2565b50610969565b816002015461072c83600301805480602002602001604051908101604052809291908181526020016000905b8282101561072357838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff16151515158152505081526020019060010190610676565b505050506112af565b1061076c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076390611eb0565b60405180910390fd5b60005b8260030180549050811015610967573373ffffffffffffffffffffffffffffffffffffffff168360030182815481106107d1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614801561087e575082600301818154811061085d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160020160009054906101000a900460ff16155b1561094c5760018360030182815481106108c1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160020160006101000a81548160ff021916908315150217905550610949836003018281548110610928577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160010154836114d690919063ffffffff16565b91505b6109606001826114d690919063ffffffff16565b905061076f565b505b600081116109ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a390611dd0565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156109f2573d6000803e3d6000fd5b5050505050565b610a016114f4565b600060018381548110610a3d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600602016040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201805480602002602001604051908101604052809291908181526020016000905b82821015610b9257838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff16151515158152505081526020019060010190610ae5565b50505050815260200160048201548152602001600582015481525050905080915050919050565b610bc16114ec565b73ffffffffffffffffffffffffffffffffffffffff16610bdf610cf3565b73ffffffffffffffffffffffffffffffffffffffff1614610c35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2c90611e70565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b808060018054905011610d64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5b90611e10565b60405180910390fd5b600060018381548110610da0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060060201905080600401544211610df6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ded90611e90565b60405180910390fd5b80600501544210610e3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3390611d50565b60405180910390fd5b8060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610ecf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec690611ef0565b60405180910390fd5b60018381548110610f09577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906006020160030160405180606001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200134815260200160001515815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548160ff0219169083151502179055505050505050565b6000610ff96114ec565b73ffffffffffffffffffffffffffffffffffffffff16611017610cf3565b73ffffffffffffffffffffffffffffffffffffffff161461106d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106490611e70565b60405180910390fd5b8183106110af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a690611db0565b60405180910390fd5b4283116110f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e890611ed0565b60405180910390fd5b60008411611134576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112b90611d90565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614156111a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119b90611d70565b60405180910390fd5b6001808160018154018082558091505003906000526020600020905050600060018080805490506111d5919061209d565b8154811061120c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906006020190506001808054905061122d919061209d565b8160000181905550858160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550848160020181905550838160040181905550828160050181905550600180805490506112a4919061209d565b915050949350505050565b60008060005b8351811015611323578381815181106112f7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151602001518261130e9190612047565b9150808061131b90612119565b9150506112b5565b5080915050919050565b6113356114ec565b73ffffffffffffffffffffffffffffffffffffffff16611353610cf3565b73ffffffffffffffffffffffffffffffffffffffff16146113a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a090611e70565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611419576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141090611df0565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600081836114e49190612047565b905092915050565b600033905090565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016060815260200160008152602001600081525090565b600061155361154e84611fd1565b611fa0565b9050808382526020820190508285606086028201111561157257600080fd5b60005b858110156115a257816115888882611600565b845260208401935060608301925050600181019050611575565b5050509392505050565b6000813590506115bb816121c0565b92915050565b600082601f8301126115d257600080fd5b81356115e2848260208601611540565b91505092915050565b6000813590506115fa816121d7565b92915050565b60006060828403121561161257600080fd5b61161c6060611fa0565b9050600061162c848285016115ac565b600083015250602061164084828501611660565b6020830152506040611654848285016115eb565b60408301525092915050565b60008135905061166f816121ee565b92915050565b60006020828403121561168757600080fd5b6000611695848285016115ac565b91505092915050565b600080600080608085870312156116b457600080fd5b60006116c2878288016115ac565b94505060206116d387828801611660565b93505060406116e487828801611660565b92505060606116f587828801611660565b91505092959194509250565b60006020828403121561171357600080fd5b600082013567ffffffffffffffff81111561172d57600080fd5b611739848285016115c1565b91505092915050565b60006020828403121561175457600080fd5b600061176284828501611660565b91505092915050565b60006117778383611cd5565b60608301905092915050565b61178c816120d1565b82525050565b61179b816120d1565b82525050565b60006117ac8261200d565b6117b68185612025565b93506117c183611ffd565b8060005b838110156117f25781516117d9888261176b565b97506117e483612018565b9250506001810190506117c5565b5085935050505092915050565b611808816120e3565b82525050565b600061181b601c83612036565b91507f43616d706169676e20697320616c72656164792066696e6973686564000000006000830152602082019050919050565b600061185b600d83612036565b91507f496e76616c6964206f776e6572000000000000000000000000000000000000006000830152602082019050919050565b600061189b600e83612036565b91507f496e76616c6964207461726765740000000000000000000000000000000000006000830152602082019050919050565b60006118db602e83612036565b91507f496e76616c69642064617465732c20737461727444617465206c61746572207460008301527f68616e2066696e697368446174650000000000000000000000000000000000006020830152604082019050919050565b6000611941601383612036565b91507f4e6f7468696e6720746f207769746864726177000000000000000000000000006000830152602082019050919050565b6000611981602683612036565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006119e7601683612036565b91507f43616d706169676e20646f65736e2774206578697374000000000000000000006000830152602082019050919050565b6000611a27601c83612036565b91507f43616d706169676e206973206e6f742066696e697368656420796574000000006000830152602082019050919050565b6000611a67603183612036565b91507f43616d706169676e206973206661696c65642c2063616e6e6f7420636f6c6c6560008301527f63742066756e6473206279206f776e65720000000000000000000000000000006020830152604082019050919050565b6000611acd602083612036565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000611b0d601b83612036565b91507f43616d706169676e206973206e6f7420737461727465642079657400000000006000830152602082019050919050565b6000611b4d603683612036565b91507f43616d706169676e206973207375636365656465642c2063616e6e6f7420636f60008301527f6c6c6563742066756e64732062792066756e64657273000000000000000000006020830152604082019050919050565b6000611bb3601983612036565b91507f5374617274206461746520697320696e207468652070617374000000000000006000830152602082019050919050565b6000611bf3602283612036565b91507f4f776e65722063616e6e6f742066756e6420697473206f776e2063616d70616960008301527f676e0000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600060c083016000830151611c646000860182611d17565b506020830151611c776020860182611783565b506040830151611c8a6040860182611d17565b5060608301518482036060860152611ca282826117a1565b9150506080830151611cb76080860182611d17565b5060a0830151611cca60a0860182611d17565b508091505092915050565b606082016000820151611ceb6000850182611783565b506020820151611cfe6020850182611d17565b506040820151611d1160408501826117ff565b50505050565b611d208161210f565b82525050565b611d2f8161210f565b82525050565b6000602082019050611d4a6000830184611792565b92915050565b60006020820190508181036000830152611d698161180e565b9050919050565b60006020820190508181036000830152611d898161184e565b9050919050565b60006020820190508181036000830152611da98161188e565b9050919050565b60006020820190508181036000830152611dc9816118ce565b9050919050565b60006020820190508181036000830152611de981611934565b9050919050565b60006020820190508181036000830152611e0981611974565b9050919050565b60006020820190508181036000830152611e29816119da565b9050919050565b60006020820190508181036000830152611e4981611a1a565b9050919050565b60006020820190508181036000830152611e6981611a5a565b9050919050565b60006020820190508181036000830152611e8981611ac0565b9050919050565b60006020820190508181036000830152611ea981611b00565b9050919050565b60006020820190508181036000830152611ec981611b40565b9050919050565b60006020820190508181036000830152611ee981611ba6565b9050919050565b60006020820190508181036000830152611f0981611be6565b9050919050565b60006020820190508181036000830152611f2a8184611c4c565b905092915050565b6000602082019050611f476000830184611d26565b92915050565b600060a082019050611f626000830188611d26565b611f6f6020830187611792565b611f7c6040830186611d26565b611f896060830185611d26565b611f966080830184611d26565b9695505050505050565b6000604051905081810181811067ffffffffffffffff82111715611fc757611fc6612191565b5b8060405250919050565b600067ffffffffffffffff821115611fec57611feb612191565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006120528261210f565b915061205d8361210f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561209257612091612162565b5b828201905092915050565b60006120a88261210f565b91506120b38361210f565b9250828210156120c6576120c5612162565b5b828203905092915050565b60006120dc826120ef565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006121248261210f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561215757612156612162565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6121c9816120d1565b81146121d457600080fd5b50565b6121e0816120e3565b81146121eb57600080fd5b50565b6121f78161210f565b811461220257600080fd5b5056fea26469706673582212204463af136d3502f11902dec154ea70fd96af141a7d7d381d4906b7cbf961cf7b64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Funding.sol:Funding",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 479,
        "contract": "contracts/Funding.sol:Funding",
        "label": "campaigns",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(Campaign)468_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Campaign)468_storage)dyn_storage": {
        "base": "t_struct(Campaign)468_storage",
        "encoding": "dynamic_array",
        "label": "struct Funding.Campaign[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(FundTx)475_storage)dyn_storage": {
        "base": "t_struct(FundTx)475_storage",
        "encoding": "dynamic_array",
        "label": "struct Funding.FundTx[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_struct(Campaign)468_storage": {
        "encoding": "inplace",
        "label": "struct Funding.Campaign",
        "members": [
          {
            "astId": 455,
            "contract": "contracts/Funding.sol:Funding",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 457,
            "contract": "contracts/Funding.sol:Funding",
            "label": "owner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 459,
            "contract": "contracts/Funding.sol:Funding",
            "label": "target",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 463,
            "contract": "contracts/Funding.sol:Funding",
            "label": "fundTxs",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_struct(FundTx)475_storage)dyn_storage"
          },
          {
            "astId": 465,
            "contract": "contracts/Funding.sol:Funding",
            "label": "startedAt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 467,
            "contract": "contracts/Funding.sol:Funding",
            "label": "finishedAt",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(FundTx)475_storage": {
        "encoding": "inplace",
        "label": "struct Funding.FundTx",
        "members": [
          {
            "astId": 470,
            "contract": "contracts/Funding.sol:Funding",
            "label": "funder",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 472,
            "contract": "contracts/Funding.sol:Funding",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 474,
            "contract": "contracts/Funding.sol:Funding",
            "label": "filled",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}